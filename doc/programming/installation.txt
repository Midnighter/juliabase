.. -*- mode: rst; coding: utf-8; ispell-local-dictionary: "english" -*-
..
.. This file is part of JuliaBase, see http://www.juliabase.org.
.. Copyright © 2008–2015 Forschungszentrum Jülich GmbH, Jülich, Germany
..
.. This program is free software: you can redistribute it and/or modify it under
.. the terms of the GNU Affero General Public License as published by the Free
.. Software Foundation, either version 3 of the License, or (at your option) any
.. later version.
..
.. This program is distributed in the hope that it will be useful, but WITHOUT
.. ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
.. FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
.. details.
..
.. You should have received a copy of the GNU Affero General Public License
.. along with this program.  If not, see <http://www.gnu.org/licenses/>.

.. index:: installation

==============
Installation
==============


.. index:: prerequisites

Prerequisites
===============

Basically, you only need the current version of the `Django web framework`_
together with its prerequisites.  Typically, this will be a computer with a
Linux operating system, and with Apache and PostgreSQL running on it.  However,
Django is flexible.  Is also runs on a Windows server, and it may be combined
with different webservers and database backends.  See `Django's own
installation guide`_ for more information.  Still, in this document, we assume
the default setup, which we also strongly recommend: Linux, Apache, PostgreSQL.
We deliberately avoid mentioning any particular Linux distribution because we
assume that at least their server flavours are similar enough.  For what it's
worth, the authors run Ubuntu Server.

.. _Django web framework: https://www.djangoproject.com/
.. _Django's own installation guide:
   https://docs.djangoproject.com/en/1.7/topics/install/

Mostly, no sophisticated finetuning of the components is necessary because
JuliaBase deployments will serve only a few (< 1000) people.  In particular,
PostgreSQL and Apache can run in default configuration by and large.  On the
other hand, the computer should be a `high-availability system`_, possibly
realized with virtual machines.  In our own installation, we manage a
three-nines system, i.e. 99.9 % availability.  Additionally, regular backups
are a must! To set up these things, however, is beyond the scope of this
document.  Your IT department may turn out to be very helpful with this.

.. _high-availability system: http://linux-ha.org/

In the following, we'll show you how to get JuliaBase up and running quickly.
While our way is already useful for a production system, you may wish or need
to do it in a different way.  Thus, consider the following a good starting
point for your own configuration.


Linux configuration
=======================

Additionally to the software that is running on any recent and decent Linux
operating system by default anyway, you must install:

- Apache2
- PostgreSQL (and the Python module “psycopg2” for it)
- memcached (and the Python module for it)
- matplotlib
- reportlab


.. index::
   pair: PostgreSQL; configuration

PostgreSQL
==============

If you have PostgreSQL and Apache on the same computer, PostgreSQL's default
configuration should work for you.  The defaults are quite restrictive, so they
can be considered secure.  Otherwise, if you need to change something, it is
probably in pg_hba.conf (where the `user authentication`_ resides) or
postgresql.conf (where the `general configuration`_ resides), both of which are
typically found in /etc/postgresql/*version*/main/.

.. _user authentication:
   http://www.postgresql.org/docs/9.1/static/auth-methods.html
.. _general configuration:
   http://www.postgresql.org/docs/9.1/static/runtime-config.html

Anyway, you create a PostgreSQL user with this:

.. code-block:: shell-session

  username@server:~$ sudo -u postgres psql
  psql (9.3.4)
  Type "help" for help.

  postgres=# CREATE USER username WITH PASSWORD ’topsecret’ CREATEDB;
  CREATE ROLE
  postgres=# \q

In this snippet, you have to replace ``username`` with your UNIX user name, and
``topsecret`` with a proper password, which shouldn't be your UNIX login
password.  Finally, create the database with:

.. code-block:: shell-session

  username@server:~$ createdb juliabase


.. index::
   pair: Django; configuration

Django
=========

A certain version of JuliaBase works only with a certain version of Django.
Currently, this is Django 1.7.  Install it according to `Django's own
instructions`_.  Not further configuration is necessary.

.. _Django's own instructions: https://www.djangoproject.com/download/


JuliaBase
===========

JuliaBase is organized in a public `Git`_ `repository on GitHub`_.  So far,
there is no public release of JuliaBase 1.0.  However, the master branch in the
repository is a release candidate, which can be cloned locally with

.. code-block:: shell-session

    username@server:~$ git clone https://github.com/juliabase/juliabase.git

It contains three Django apps:

1. jb_common
2. samples
3. institute

“jb_common” implements the basic JuliaBase functionality.  On top of that,
“samples” implements the actual samples database.  And on top of that,
“institute” implements code that is specific to the specific institution or
department or work group that wants to use JuliaBase.  “institute” implements a
*generic* institute.  You will replace “institute” with your own app.

.. _Git: http://git-scm.com/
.. _repository on GitHub: https://github.com/juliabase

While the naked Git repo is suitable to get JuliaBase up and running quickly,
in the section :ref:`“Organizing your source code” <Organizing your source
code>`, we'll explain the directory structure that you should use if you plan
to actually using JuliaBase.


.. index::
   pair: Apache; configuration

Apache
==========

Add to your Apache configuration something like the following:

.. code-block:: apache

  <VirtualHost *:80>
    ServerName juliabase.example.com
    WSGIScriptAlias / /home/username/myproject/mysite/wsgi.py
    XSendFile on
    XSendFilePath /
    Alias /media /var/www/juliabase/media
    <Location "/">
      Order allow,deny
      Allow from all
      Require all granted
    </Location>
  </VirtualHost>

This snippet contains several parts that highly probably need to be adjusted by
you, in particular ``juliabase.example.com``, ``username``, and all paths in
general.  But this should be obvious.  The proper place for it depends on your
Linux variant.  It may be the (new) file ``/etc/apache2/httpd.conf``, or a new
file in ``/etc/apache2/conf.d``, or a new file in
``/etc/apache2/sites-available`` with a symlink in
``/etc/apache2/sites-enabled``.
